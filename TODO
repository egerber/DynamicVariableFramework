PROBLEMS:
- So far, there is no way to make an assignment (for example to a delayed variable) in the form of var=new_value. In this case the instance of DynamicVariable would be replaced
by new_value



TODO:
- Change access to variables internally so that those variables can be replaced by objects of DynamicVariable
- Sigmoid Variable
- Tanh Variable
- Class dynamics of a group sharing a ressource
- Autoscaling for monitor
- adding and tracking dynamicArrays with monitor
- specifying the subplot for a variable
- make DynamicArray iterable

THINKABOUT
- instead of tick implement method update(timesteps). Update performs change dependent on the time that has passed
- create factory class: if certain parameter is not given (e.g. update, DynamicVariable), then this class calculates update as a scalar, otherwise it uses assign (use several different cases in order
to improve performance)
- DelayedVariable and SlidingAverage could be generalized to cachedArray and in addition there could be a wrapper around them or a generalized class taking a lambda expression

-Generate a generic class called System that monitor,logger,manager can wrap around and iterate automatically
-> System has to
-Maybe MomentumVariable needs to be implemented as Timedependent Variable because otherwise many unapplied assignments will cause variable to increase very fast
-Mechanism for automatically adding timedependentVariable into pool that updates them according to the order of how they are added
-Initialize all arrays by refering to a parent that calls them
    -> pass system, call: system.add_variable(self)

-initialize each variable with a name (optional), if no name is passed, name is e.g. staticConvergingVariable_2

CHECK
The order in which tick is called is important. If one variable contains another variable, the nested variable needs to be updated first
if the assign method gets implemented by __call__, there can be lambdas used as updaters and therefore improve performance
